#include <stdio.h>
#include <time.h>
int size;
void swap(int *a, int *b)
{ 
int temp = *a; 
*a = *b;
*b = temp;
}  
 // bubble sort function
void bubbleSort(int array[], int n) 
{ 
int i, j; 
for (i = 0; i < n-1; i++)       
for (j = 0; j < n-i-1; j++) if (array[j] > array[j+1]) 
swap(&array[j], &array[j+1]); 
}   
// Selection Sort
void SelectionSort(int array[], int n)
{
	 int min_index;
    for(int i = 0; i < n - 1; i++)
	{
        min_index = i;
        for(int j = i + 1; j < n; j++)
	    {
            if(array[min_index] > array[j]) {
                min_index = j;
            }
        }
        if(min_index != i)
        {
            int temp = array[i];
            array[i] = array[min_index];
            array[min_index] = temp;
        }
	}
}

// Insertion sort
void InsertionSort(int array[], int size){
  int  cur = 0;
  int  j = 0;
    
    for(int i = 1; i < size; i++){
        cur = array[i];
        j = i-1;
        
        // finding right position for the current and shifting one position to the right
        while(j >= 0 && cur<array[j]){
            array[j+1] = array[j];
            j--;
        }
        
        // placing current to its correct position
        array[j+1] = cur;
    }
}
// Merge Sort

void merge(int array[], int l,
           int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
 
    // Create temp arrays
    int L[n1], R[n2];
 
    // Copy data to temp arrays
    // L[] and R[]
    for (i = 0; i < n1; i++)
        L[i] = array[l + i];
    for (j = 0; j < n2; j++)
        R[j] = array[m + 1 + j];
 
    // Merge the temp arrays back
    // into arr[l..r]
    // Initial index of first subarray
    i = 0;
 
    // Initial index of second subarray
    j = 0;
 
    // Initial index of merged subarray
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            array[k] = L[i];
            i++;
        }
        else
        {
            array[k] = R[j];
            j++;
        }
        k++;
    }
 
    // Copy the remaining elements
    // of L[], if there are any
    while (i < n1) {
        array[k] = L[i];
        i++;
        k++;
    }
 
    // Copy the remaining elements of
    // R[], if there are any
    while (j < n2)
    {
        array[k] = R[j];
        j++;
        k++;
    }
}
 
// l is for left index and r is
// right index of the sub-array
// of arr to be sorted
void mergeSort(int array[],
               int l, int r)
{
    if (l < r)
    {
        // Same as (l+r)/2, but avoids
        // overflow for large l and h
        int m = l + (r - l) / 2;
 
        // Sort first and second halves
        mergeSort(array, l, m);
        mergeSort(array, m + 1, r);
 
        merge(array, l, m, r);
    }
}
// Quick sort 
int partition(int array[], int low, int high)
{
	int pivot = array[high];
	int i = (low - 1);
    int j;
	for (j = low; j <= high - 1; j++) {
		if (array[j] <= pivot) {
			i++;
			swap(&array[i], &array[j]);
		}
	}
	swap(&array[i + 1], &array[high]);  
	return (i + 1);
}

// Quick Sort function
void quicksort(int array[], int low, int high)
{
	if (low < high) {
		// pi = Partition index
		int pi = partition(array, low, high);
		quicksort(array, low, pi - 1);
		quicksort(array, pi + 1, high);           
	}
}
 
 
// Function to print the elements of an array
void printArray(int array[], int size) 
{ 
int i; 
for (i=0; i < size ; i++) 
printf("%d ", array[i]); 
}   

int Function1(int array[], int size) 
{ 

bubbleSort(array, size);
printf("Sorted array: "); 
printArray(array, size); 
return 0; 
}
int Function2(int array[],int size) 
{  
SelectionSort(array, size);
printf("\n Sorted array: "); 
printArray(array, size); 
return 0; 
}

int Function3(int array[],int size) 
{  
InsertionSort(array, size);
printf("\n Sorted array: "); 
printArray(array, size); 
return 0; 
}

int Function4(int array[],int size) 
{  
mergeSort(array, 0, size - 1);
printf("\n Sorted array: "); 
printArray(array, size);
}
int Function5(int array[], int size){
    quicksort(array, 0, size - 1);
    printf("\n Sorted array: ");
    printArray(array, size);
}



// The main program calls fun() and measures time taken by fun()
int main()
{  
    int i;
    printf("Enter size of array ");
    scanf("%d", &size);
   int array[size];
    printf("\n Enter the elements of array ");
    for(i=0; i<size; i++)
    {
        scanf("%d", &array[i]);
    }
	// Calculate the time taken 
	clock_t t;
	t = clock();
	Function1(array, size);
	t = clock() - t;
	double time_taken = ((double)t)/CLOCKS_PER_SEC; // in seconds
	printf(" The bubble Sort function took %f seconds to execute ", time_taken);

    clock_t t2;
	t2 = clock();
	Function2(array, size);
	t2 = clock() - t2;
	double time_taken2 = ((double)t2)/CLOCKS_PER_SEC; // in seconds
    printf("The Selection Sort function took %f seconds to execute ", time_taken2);

    clock_t t3;
	t3 = clock();
	Function3(array, size);
	t3 = clock() - t3;
	double time_taken3 = ((double)t3)/CLOCKS_PER_SEC; // in seconds
    printf("The Insertion Sort function took %f seconds to execute ", time_taken3);

    clock_t t4;
	t4 = clock();
	Function4(array, size);
	t4 = clock() - t4;
	double time_taken4 = ((double)t4)/CLOCKS_PER_SEC; // in seconds
    printf("The Merge Sort function took %f seconds to execute ", time_taken4);

    clock_t t5;
	t5 = clock();
	Function4(array, size);
	t5 = clock() - t5;
	double time_taken5 = ((double)t5)/CLOCKS_PER_SEC; // in seconds
    printf("The Quick Sort function took %f seconds to execute ", time_taken5);

	return 0;
}
